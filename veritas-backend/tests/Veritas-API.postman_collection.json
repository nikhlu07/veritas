{
  "info": {
    "name": "Veritas API Collection",
    "description": "Comprehensive API testing collection for Veritas product verification system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "veritas-api-collection-v1"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string"
    },
    {
      "key": "batchId",
      "value": "",
      "type": "string"
    },
    {
      "key": "claimId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Get API Health Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check if the API server and database are healthy"
          },
          "response": [
            {
              "name": "Healthy Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": ["{{baseUrl}}"],
                  "path": ["health"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"healthy\",\n    \"timestamp\": \"2024-01-15T10:30:00.000Z\",\n    \"service\": \"veritas-backend\",\n    \"database\": \"connected\",\n    \"hedera\": \"ready\"\n}"
            }
          ]
        },
        {
          "name": "Get API Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api",
              "host": ["{{baseUrl}}"],
              "path": ["api"]
            },
            "description": "Get basic API information and version"
          },
          "response": []
        }
      ],
      "description": "Health and status endpoints"
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Create Product with Claims",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Product created with valid batch_id', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.product).to.have.property('id');",
                  "    pm.expect(jsonData.product).to.have.property('batch_id');",
                  "    pm.expect(jsonData.product.batch_id).to.match(/^[A-Z]+-\\d{4}-\\d{4}$/);",
                  "    ",
                  "    // Store for use in other requests",
                  "    pm.collectionVariables.set('productId', jsonData.product.id);",
                  "    pm.collectionVariables.set('batchId', jsonData.product.batch_id);",
                  "});",
                  "",
                  "pm.test('Claims were created', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.claims).to.be.an('array');",
                  "    if (jsonData.claims.length > 0) {",
                  "        pm.collectionVariables.set('claimId', jsonData.claims[0].id);",
                  "    }",
                  "});",
                  "",
                  "pm.test('QR code generated', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.qr_code).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_name\": \"Colombian Arabica Coffee\",\n  \"supplier_name\": \"Fair Trade Coffee Co\",\n  \"description\": \"Single origin beans from Colombian highlands, sustainably sourced\",\n  \"claims\": [\n    {\n      \"claim_type\": \"organic_certified\",\n      \"description\": \"USDA Organic Certified #COL-2024-001\"\n    },\n    {\n      \"claim_type\": \"fair_trade\",\n      \"description\": \"Fair Trade USA Certified - Supports farmer communities\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            },
            "description": "Create a new product with associated claims"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"product_name\": \"Colombian Arabica Coffee\",\n  \"supplier_name\": \"Fair Trade Coffee Co\",\n  \"description\": \"Single origin beans from Colombian highlands\",\n  \"claims\": [\n    {\n      \"claim_type\": \"organic_certified\",\n      \"description\": \"USDA Organic Certified #COL-2024-001\"\n    }\n  ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/products",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "products"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"success\": true,\n    \"product\": {\n        \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n        \"batch_id\": \"COLOMBIAN-2024-1234\",\n        \"product_name\": \"Colombian Arabica Coffee\",\n        \"supplier_name\": \"Fair Trade Coffee Co\",\n        \"qr_code_url\": \"https://veritas.app/verify/COLOMBIAN-2024-1234\"\n    },\n    \"claims\": [\n        {\n            \"id\": \"claim-uuid-1\",\n            \"claim_type\": \"organic_certified\",\n            \"description\": \"USDA Organic Certified #COL-2024-001\",\n            \"hcs_transaction_id\": \"0.0.123456@1641234567.123456789\",\n            \"hcs_timestamp\": \"2024-01-15T10:30:00Z\"\n        }\n    ],\n    \"timestamp\": \"2024-01-15T10:30:00.000Z\"\n}"
            }
          ]
        },
        {
          "name": "Create Product without Claims",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_name\": \"Artisan Chocolate Bar\",\n  \"supplier_name\": \"Swiss Chocolatiers Ltd\",\n  \"description\": \"70% Dark chocolate made from single-origin cocoa beans\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            },
            "description": "Create a product without any initial claims"
          },
          "response": []
        },
        {
          "name": "Get Product by Batch ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{batchId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{batchId}}"]
            },
            "description": "Retrieve a product and its claims using the batch ID"
          },
          "response": []
        },
        {
          "name": "Verify Product",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/verify/{{batchId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "verify", "{{batchId}}"]
            },
            "description": "Verify product authenticity and compare with blockchain data"
          },
          "response": []
        }
      ],
      "description": "Product management endpoints"
    },
    {
      "name": "Claims",
      "item": [
        {
          "name": "Add Claim to Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Claim created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.claim).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_id\": \"{{productId}}\",\n  \"claim_type\": \"quality\",\n  \"description\": \"Third-party quality assurance verification completed successfully\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/claims",
              "host": ["{{baseUrl}}"],
              "path": ["api", "claims"]
            },
            "description": "Add a new claim to an existing product"
          },
          "response": []
        }
      ],
      "description": "Claim management endpoints"
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Invalid Product - Missing Required Field",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response format', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_name\": \"Test Product\",\n  \"description\": \"Missing supplier_name field\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            },
            "description": "Test validation error for missing required field"
          },
          "response": []
        },
        {
          "name": "Invalid Product - Empty Product Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_name\": \"\",\n  \"supplier_name\": \"Test Supplier\",\n  \"description\": \"Empty product name should fail validation\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            },
            "description": "Test validation error for empty product name"
          },
          "response": []
        },
        {
          "name": "Invalid Batch ID Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/invalid-batch-id-format",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "invalid-batch-id-format"]
            },
            "description": "Test validation error for invalid batch ID format"
          },
          "response": []
        },
        {
          "name": "Non-existent Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response format', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/NONEXISTENT-2024-9999",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "NONEXISTENT-2024-9999"]
            },
            "description": "Test 404 error for non-existent product"
          },
          "response": []
        },
        {
          "name": "Invalid Claim - Missing Product ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"claim_type\": \"quality\",\n  \"description\": \"Missing product_id field\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/claims",
              "host": ["{{baseUrl}}"],
              "path": ["api", "claims"]
            },
            "description": "Test validation error for claim missing product ID"
          },
          "response": []
        },
        {
          "name": "Invalid Claim - Non-existent Product ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_id\": \"00000000-0000-0000-0000-000000000000\",\n  \"claim_type\": \"quality\",\n  \"description\": \"Claim for non-existent product\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/claims",
              "host": ["{{baseUrl}}"],
              "path": ["api", "claims"]
            },
            "description": "Test error for claim with non-existent product ID"
          },
          "response": []
        },
        {
          "name": "Malformed JSON",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_name\": \"Test Product\",\n  \"supplier_name\": \"Test Supplier\",\n  \"description\": \"Malformed JSON - missing closing quote\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            },
            "description": "Test error handling for malformed JSON"
          },
          "response": []
        }
      ],
      "description": "Error scenario testing"
    },
    {
      "name": "HCS Integration Tests",
      "item": [
        {
          "name": "Create Product - HCS Enabled",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_name\": \"HCS Test Product\",\n  \"supplier_name\": \"Blockchain Test Co\",\n  \"description\": \"Product specifically for testing Hedera HCS integration\",\n  \"claims\": [\n    {\n      \"claim_type\": \"authenticity\",\n      \"description\": \"Blockchain verified authentic product for HCS testing\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            },
            "description": "Create product with HCS integration (requires Hedera configuration)"
          },
          "response": []
        }
      ],
      "description": "Hedera Consensus Service integration tests"
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Concurrent Product Creation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_name\": \"Performance Test Product {{$randomInt}}\",\n  \"supplier_name\": \"Performance Test Supplier\",\n  \"description\": \"Product created for performance testing with random ID {{$randomInt}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            },
            "description": "Create product with random data for performance testing"
          },
          "response": []
        }
      ],
      "description": "Performance and load testing"
    }
  ],
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set collection variables if not already set",
          "if (!pm.collectionVariables.get('baseUrl')) {",
          "    pm.collectionVariables.set('baseUrl', 'http://localhost:3001');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test scripts",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has correct content type', function () {",
          "    if (pm.response.code !== 404) {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    }",
          "});"
        ]
      }
    }
  ]
}